theory spdm
begin

builtins: diffie-hellman, signing, asymmetric-encryption, symmetric-encryption, hashing
functions: hmac/2, hkdf/3


restriction equality:
    "All x y #i. Eq(x, y) @ i ==> x = y"

restriction inequality:
    "All x y #i. Neq(x, y) @ i ==> not(x = y)"



///////////////////////////////////////////////////////
/////////////// INITIALIZATION ROLE //////////////////
//////////////////////////////////////////////////////
rule Init_Alice:
let
    Alice_Pub_Key= pk(~Ask)
    V_A = <'v1_A', 'v2_A'>  // Alice's supported protocol versions
in
[ 
    Fr(~Ask),  
    !CA_PublicKey(CA_pub)
    //!Alice_Certificate(Alice_Signed_Cert) 
]

--[ InitAlice(~Ask) ]->

  [ !Alice_Keys(~Ask, pk(~Ask)),
    !Alice_Pub(Alice_Pub_Key),
    !Capabilities('Alice', V_A),
    Out(Alice_Pub_Key) ]


rule Init_Bob:
let
    Bob_Pub_Key= pk(~Bsk)
    V_B = <'v1_B', 'v2_B'>  // Bob's supported protocol versions
in
[
    Fr(~Bsk), 
    !CA_PublicKey(CA_pub)
    //!Bob_Certificate(Bob_Signed_Cert)
 
]
--[ InitBob(~Bsk) ]->
[   !Bob_Keys(~Bsk, pk(~Bsk)),
    !Bob_Pub(Bob_Pub_Key),
    !Capabilities('Bob', V_B),
    Out(Bob_Pub_Key) ]


///////////////////////////////////////////////////////
/////////////// Inititalize Identities/////////////////
//////CA GENERATION & CERTIFICATE ISSUANCE/////////////
//////////////////////////////////////////////////////


///(1) Certificate Authority ///
//CA's own key pair generation
rule Certificate_Authority:

let 
    CA_pub = pk(~CA_sk)
  in
[ Fr(~CA_sk) ] 
--[ CA_Key_Generated(~CA_sk) ]-> 

[   !CA_SecretKey(~CA_sk),
    !CA_PublicKey(CA_pub),
    Out(CA_pub) 
]



///(2) CA Producing Certificates for both Alice and Bob ///
//Alice certificate
rule CA_Issues_Alice_Certificate:
let
Alice_PK=Alice_Pub_Key                                       //Alice's Public Key
Alice_Signed_Cert=sign(<'Alice', Alice_PK>, ~CA_sk)         // The CA signs
in
[
    !Alice_Pub(Alice_Pub_Key),
    !CA_SecretKey(~CA_sk)
]
--[ CA_Issues_Alice_Cert('Alice', Alice_PK)]->
[
    !Alice_Certificate(Alice_Signed_Cert)
]

//Bob certificate
rule CA_Issues_Bob_Certificate:
let Bob_PK=Bob_Pub_Key
Bob_Signed_Cert=sign(<'Bob', Bob_PK>, ~CA_sk)
in
[
    !Bob_Pub(Bob_Pub_Key),
    !CA_SecretKey(~CA_sk)
]

--[CA_Issues_Bob_Cert('Bob', Bob_PK)]->
[
    !Bob_Certificate(Bob_Signed_Cert)
]



///////////////////////////////////////////////////////
////////////////////// VCA Phase /////////////////////
//////////////////////////////////////////////////////

rule VCA_Request_From_Alice:

let 

    message_A = <'VCA_REQ', V_A, Alice_Pub_Key, cert_A> // Request message
      
in
[  
    !Alice_Certificate(cert_A),
    !Capabilities('Alice', V_A),
    !Alice_Keys(~Ask, pk(~Ask)),
    !Alice_Pub(Alice_Pub_Key)

]
--[ VCARequestSent(message_A),
    State_Alice1('VCA_REQ', V_A, Alice_Pub_Key, cert_A) ]->
[ 
    Out(message_A)

]

rule VCA_Response_From_Bob:
let
    message_B= <'VCA_RSP', V_B, Bob_Pub_Key, cert_B>  // Response message
    message_sent_by_Alice=<'VCA_REQ', V_A, Alice_Pub_Key, cert_A>

in
[ 
    In(message_sent_by_Alice),
    !Bob_Certificate(cert_B),
    !Bob_Keys(~Bsk, pk(~Bsk)),
    !Bob_Pub(Bob_Pub_Key),
    !Capabilities('Bob', V_B)
    //should bob verify Alice certificate?
]
--[ VCAResponseSent(message_B),
    State_Bob1('VCA_REQ', V_A, Alice_Pub_Key, cert_A,'VCA_RSP', V_B, Bob_Pub_Key, cert_B )
]->
[ 
    Out(message_B)
]

rule VCA_Response_Processed_By_Alice:
let
    message_sent_by_Bob = <'VCA_RSP', V_B, Bob_Pub_Key, cert_B>
    AgreedVersion = <V_A, V_B>
in
[
    In(message_sent_by_Bob),
    !Alice_Certificate(cert_A),
    !Alice_Keys(~Ask, pk(~Ask)),
    !Alice_Pub(Alice_Pub_Key),
    !Capabilities('Alice', V_A,)
//should alice verify the bobs' certificate?

]
--[ VCAResponseProcessed(AgreedVersion),
State_Alice2('VCA_REQ', V_A, Alice_Pub_Key, cert_A,'VCA_RSP', V_B, Bob_Pub_Key, cert_B),

!VCA_Transcript('VCA_REQ', V_A, Alice_Pub_Key, cert_A,'VCA_RSP', V_B, Bob_Pub_Key, cert_B) 
]->
[
    !Agreement('Alice', 'Bob', AgreedVersion  )
]


///////////////////////////////////////////////////////
////////////////////// Measurements////////////////////
//////////////////////////////////////////////////////

rule Get_Measurements_Request_by_Alice:
let
    requestMsg = <'GET_MEASUREMENTS', 'versionI'>  // maybe we put “Initiator’s version”
in
[
    // We check that the initiator has completed VCA with the responder
    //!Agreement('Alice','Bob', AgreedVer)
]
--[ GetMeasurementsRequestbyAlice('versionI') ]->
[
    !Alice_measurement('versionI'),
    Out(requestMsg)
]


rule Send_Measurements_Response_by_Bob:
let
    requestMsg = <'GET_MEASUREMENTS', 'versionI'>
    responseMsg = <'MEASUREMENTS', 'versionR'>
in
[
    In(requestMsg)
    //!Measurement('Bob', bobMeas)
]
--[ MeasurementsSentbyBob('versionR') ]->

[
    Out(responseMsg)
]


rule Process_Measurements_At_Alice:
let
    responseMsg = <'MEASUREMENTS', 'versionR'>
in
[
    !Alice_measurement('versionI'),
    In(responseMsg)
]
--[ Process_Measurements_At_Alice('versionI', 'versionR') ]->
[
    // possibly store it in a fact that Alice knows Bob’s measurement
    !KnowsMeasurement('versionI', 'versionR')
]

///////////////////////////////////////////////////////
///////////////////KEY EXCHANGE////////////////////////
//////////////////////////////////////////////////////

rule Alice_KE_Request:
let
    gx = 'g'^~x
    message = <'Key_Exchange', gx, NonceA>
    new_transcript = (<'Key_Exchange',gx, NonceA>)
in
[
    Fr(~x),
    Fr(NonceA)
]
--[ KeyExchangeSent('Alice', gx, NonceA) ]->
[
    Out(message),
    !Ephemeral_PrivKey_Alice(~x),
    !Ephemeral_PubKey_Alice(gx),
    !Transcript(new_transcript)
]

rule Bob_Key_Exchange_Response:
let

VCA = <'VCA_REQ', V_A, Alice_Pub_Key, cert_A,'VCA_RSP', V_B, Bob_Pub_Key, cert_B>
gy = g^~y         
dh_out = gx^~y
Transcript = <VCA, Hash(cert_B), 'KEY_EXCHANGE', g^x, Nonce_A,'KEY_EXCHANGE_RSP', g^~y, Nonce_B>
signature = sign(h(Transcript), ~Bsk)
hmac_key_resp = hkdf(<dh_out, transcript_for_signing, 'finished resp'>)  
hmac_key_init = hkdf(<dh_out, transcript_for_signing, 'finished init'>)



in
[
    In(<'KEY_EXCHANGE', gx, NonceA>),
    Fr(~y),                            
    Fr(~NonceB),  
    !VCA_Transcript('VCA_REQ', V_A, Alice_Pub_Key, cert_A,'VCA_RSP', V_B, Bob_Pub_Key, cert_B),
    !Bob_Keys(~Bsk, pk(~Bsk)) 

]

--[]->

[
    !Ephemeral_Key_Bob(gy),            
    !Nonce_Bob(~NonceB),               
    !Shared_Key_Bob(dh_out),          
    !Finished_Key_Responder(hmac_key_resp),  
    !Finished_Key_Initiator(hmac_key_init)

]












// lemma Sanity_Check:
//   exists-trace
//     "Ex message_A message_B AgreedVersion #i #j #k #l #m #n.
//     VCARequestSent(message_A) @i &
//     VCAResponseSent(message_B) @j &
//     VCAResponseProcessed(AgreedVersion) @k &
//     GetMeasurementsRequestbyAlice('versionI') @l &
//     MeasurementsSentbyBob('versionR') @m &
//     Process_Measurements_At_Alice('versionI', 'versionR') @n
//     "









end